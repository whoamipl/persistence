//TODO
//1. Metody transakcyjne (UNIQE, NOT NULL,
// b) ciąg różnych operacji
//2. Test transakcyjności
package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;

import com.example.jdbcdemo.domain.Computer;

import javax.swing.text.html.HTMLDocument;

public class ComputerManagerJDBC implements ComputerManager {
	
	private Connection connection;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	private String createComputerTable = "CREATE TABLE Computer (id bigint GENERATED BY DEFAULT AS IDENTITY, model varchar(20), ram bigint,"
			+ " cpu varchar(20), hdd bigint, gpu varchar(50), price DECIMAL (6,2))";
	private Statement statement;
	
	private PreparedStatement addComputerStmt;
	private PreparedStatement deleteAllComputersStmt;
	private PreparedStatement getAllComputersStmt;
	private PreparedStatement updateComputerStmt;
	private PreparedStatement getComputerByIdStmt;
	private PreparedStatement deleteComputerById;
	private PreparedStatement getLastInsertedId;

	public ComputerManagerJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Computer".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createComputerTable);

			addComputerStmt = connection
					.prepareStatement("INSERT INTO Computer(model, ram, cpu, hdd, gpu, price) VALUES (?, ?, ?, ?, ?, ?)",
                            Statement.RETURN_GENERATED_KEYS);
			deleteAllComputersStmt = connection
					.prepareStatement("DELETE FROM Computer");
			getAllComputersStmt = connection
					.prepareStatement("SELECT model, ram, cpu, hdd, gpu, price FROM Computer");
			updateComputerStmt = connection.
					prepareStatement("UPDATE Computer SET model = ? , ram = ?, cpu = ?, hdd = ?, gpu = ? , price = ? WHERE  id = ?");
			getComputerByIdStmt = connection.
					prepareStatement("SELECT model, ram, cpu, hdd, gpu, price FROM Computer WHERE id = ?");
			deleteComputerById = connection.
					prepareStatement("DELETE FROM Computer WHERE  id = ?");
            getLastInsertedId = connection.
                    prepareStatement("CALL IDENTITY()");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public int addComputer(Computer computer) {
        int id = -1;
		int count = 0;
		try {

			addComputerStmt.setString(1, computer.getModel());
			addComputerStmt.setInt(2, computer.getRam());
			addComputerStmt.setString(3, computer.getCpu());
			addComputerStmt.setInt(4, computer.getHdd());
			addComputerStmt.setString(5, computer.getGpu());
			addComputerStmt.setDouble(6, computer.getPrice());
			count = addComputerStmt.executeUpdate();
            ResultSet rs = addComputerStmt.getGeneratedKeys();
            if (rs.next()) {
                id = rs.getInt(1);
            }

		} catch (Exception e) {
			e.printStackTrace();
		}

		return id;
	}

	@Override
	public List<Computer> getAllComputers() {

		List<Computer> computers = new ArrayList<>();
		try {

			ResultSet rs = getAllComputersStmt.executeQuery();

			while (rs.next()) {

				Computer c = new Computer();
				c.setModel(rs.getString("model"));
				c.setCpu(rs.getString("cpu"));
				c.setGpu(rs.getString("gpu"));
				c.setHdd(rs.getInt("hdd"));
				c.setRam(rs.getInt("ram"));
				c.setPrice(rs.getDouble("price"));

				computers.add(c);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return computers;
	}

	public int deleteComputer(int id)  {

		int count = -1;
		try {
			deleteComputerById.setInt(1, id);
			count = deleteComputerById.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int updateComputer(int id, Computer computer) {

		int count = 0;
		try {

            updateComputerStmt.setString(1, computer.getModel());
			updateComputerStmt.setInt(2, computer.getRam());
			updateComputerStmt.setString(3, computer.getCpu());
			updateComputerStmt.setInt(4, computer.getHdd());
			updateComputerStmt.setString(5, computer.getGpu());
			updateComputerStmt.setDouble(6, computer.getPrice());
			updateComputerStmt.setDouble(6, computer.getPrice());
			updateComputerStmt.setInt(7,id);
			count = updateComputerStmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return count;
	}

	public Computer getComputerById(int id) {

		Computer c = null;

		try {

			getComputerByIdStmt.setInt(1, id);
			ResultSet rs = getAllComputersStmt.executeQuery();

			while (rs.next()) {

				c = new Computer();
				c.setModel(rs.getString("model"));
				c.setCpu(rs.getString("cpu"));
				c.setGpu(rs.getString("gpu"));
				c.setHdd(rs.getInt("hdd"));
				c.setRam(rs.getInt("ram"));
				c.setPrice(rs.getDouble("price"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return c;
	}

	public int deleteAllComputers() {
		int count = 0;
		try {
			count = deleteAllComputersStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;

	}

	public int addFromCsv(String fileName) {
	    return 0;
    }

    public int udpadePrices(double percent) {

		HashMap<Long, Double> enries = new HashMap<>();
		int count = 0;
		try {
			PreparedStatement getAllCompuer = connection.
					prepareStatement("SELECT id, price FROM Computer;");
			PreparedStatement update = connection.
					prepareStatement("UPDATE Computer SET price = ? WHERE id = ?;");
			ResultSet query = getAllCompuer.executeQuery();
			while (query.next()) {
				enries.put(query.getLong(1), query.getDouble(2));
			}
			connection.setAutoCommit(false);
			Set entrySet = enries.entrySet();
			Iterator iterator = entrySet.iterator();
			while (iterator.hasNext()) {
				Map.Entry entry = (Map.Entry) iterator.next();
				update.setDouble(1,(Double)entry.getValue() * percent);
				update.setLong(2, (Long) entry.getKey());
				count += update.executeUpdate();
			}
			connection.setAutoCommit(true);
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return 0;
	}

	Connection getConnection() {
		return this.connection;
	}

	public void transactionalAddAndUpdate (Computer computerInsert, Computer computerUpdate) {

		try {
			int id = 0;
			connection.setAutoCommit(false);
			addComputerStmt.setString(1, computerInsert.getModel());
			addComputerStmt.setInt(2, computerInsert.getRam());
			addComputerStmt.setString(3, computerInsert.getCpu());
			addComputerStmt.setInt(4, computerInsert.getHdd());
			addComputerStmt.setString(5, computerInsert.getGpu());
			addComputerStmt.setDouble(6, computerInsert.getPrice());
			addComputerStmt.executeUpdate();
			ResultSet rs = addComputerStmt.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			updateComputerStmt.setString(1, computerUpdate.getModel());
			updateComputerStmt.setInt(2, computerUpdate.getRam());
			updateComputerStmt.setString(3, computerUpdate.getCpu());
			updateComputerStmt.setInt(4, computerUpdate.getHdd());
			updateComputerStmt.setString(5, computerUpdate.getGpu());
			updateComputerStmt.setDouble(6, computerUpdate.getPrice());
			updateComputerStmt.setDouble(6, computerUpdate.getPrice());
			updateComputerStmt.setInt(7,id);
			updateComputerStmt.executeUpdate();

			connection.commit();
			System.out.println("Done!");
		} catch (SQLException e) {
			System.out.println(e.getMessage());
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
		}
	}

}
